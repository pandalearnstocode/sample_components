name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr_validator:
    runs-on: ubuntu-latest
    steps:
    - name: PR validation
      run: echo "Run PR Validation here."
  test_suite:
    runs-on: ubuntu-latest
    needs: pr_validator
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Run test suite here
      run: make test-ci
    - uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage.xml
        retention-days: 5
    - name: Pytest coverage comment
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-xml-coverage-path: ./coverage.xml
  linting_checks:
    runs-on: ubuntu-latest
    needs: pr_validator
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Run pylint checks here
      run: |
        poetry run pylint $(git ls-files '*.py') -r n --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" --exit-zero > pylint.log
        [ -s pylint.log ] || echo 'No Pylint error found..' > pylint.log
    - uses: actions/upload-artifact@v1
      with:
        name: pylintlog
        path: pylint.log
    - name: Comment pylint logs in PR
      uses: machine-learning-apps/pr-comment@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        path: pylint.log
    - name: Run flake8 checks here
      run: |
        poetry run flake8 --exit-zero --output-file=flake8.txt sample_components tests
        [ -s flake8.txt ] || echo 'No Flake8 error found..' > flake8.txt
    - uses: actions/upload-artifact@v1
      with:
        name: flake8_reports
        path: flake8.txt
    - name: comment Flake8 logs in PR
      uses: machine-learning-apps/pr-comment@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        path: flake8.txt
  formatting_checks:
    runs-on: ubuntu-latest
    needs: pr_validator
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Autoformat check and fix
      run: |
        poetry run isort --settings-path pyproject.toml ./
        poetry run isort --diff --check-only --settings-path pyproject.toml ./
        poetry run black --config pyproject.toml ./
        poetry run black --diff --check --config pyproject.toml ./
        poetry run darglint --verbosity 2 sample_components tests
        poetry run pyupgrade --exit-zero-even-if-changed --py38-plus **/*.py
    - name: Check for modified files
      id: git-check
      run: echo ::set-output name=modified::$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)
    - name: Commit changes
      if: steps.git-check.outputs.modified == 'true'
      uses: EndBug/add-and-commit@v9
      with:
        author_name: pandalearnstocode
        author_email: pandalearnstocode@users.noreply.github.com
        message: 'automated black, isort, darglint fixes'
        add: '*.py'
    - uses: psf/black@stable
      with:
        options: "--check --verbose"
        src: "./sample_components"
        jupyter: true
        version: "22.10"
    - name: Run formatting checks here
      run: echo "Run formatting checks here."
  security_checks:
    runs-on: ubuntu-latest
    needs: pr_validator
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Run pylint checks here
      run: |
        poetry run bandit --exit-zero --format json --output bandit-report.json -r sample_components tests
        [ -s bandit-report.json ] || echo '{"error":"No bandit error found.""}' > bandit-report.json
    - uses: actions/upload-artifact@v1
      with:
        name: bandit_report
        path: bandit-report.json
    - name: comment bandit report in PR
      uses: machine-learning-apps/pr-comment@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        path: bandit-report.json
  notify:
    runs-on: ubuntu-latest
    needs: [test_suite, linting_checks, formatting_checks, security_checks]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/download-artifact@v3
    - name: Publish Sonar Cloud Result
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Send notifications here
      run: echo "Send notifications here."

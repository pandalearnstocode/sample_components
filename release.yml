name: Release

on:
  push:
    branches:
      - init

jobs:
  sonar_analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Download data from DVC for test execution
      run: echo "Download data from dvc for test execution"
    - name: Run test suite here
      run: |
        poetry run coverage run -m pytest -q tests
        poetry run coverage xml
        mkdir coverage
        cp coverage.xml coverage/coverage.xml
    - name: Run pylint here and put in path
      run: echo "Run pylint here and put in path"
    - name: Run flake8 here and put in path
      run: echo "Run flake8 here and put in path"
    - name: Run bandit here and put in path
      run: echo "Run bandit here and put in path"
    - name: Publish Sonar Cloud Result
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  release:
    runs-on: ubuntu-latest
    needs: sonar_analysis
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Run release drafter (optional)
      run: echo "Run release drafter (optional)"
    - name: Use Python Semantic Release to prepare release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          poetry run semantic-release publish
    - name: Run smoke tests in docker to ensure docker build is working
      run: echo "Run smoke tests in docker to ensure docker build is working"
    - name: Login to azure using SPN to access ACR & build, push docker image with latest and current tag
      run: echo "Login to azure using SPN to access ACR & build, push docker image  with latest and current tag"
    - name: Login to jfrog using service account, create wheel file with latest and current tag and push
      run: echo "Login to jfrog using service account, create wheel file with latest and current tag and push"
    - name: Deploy wiki
    - run: poetry run mkdocs gh-deploy --force --clean --verbose
  notify:
    runs-on: ubuntu-latest
    needs: release
    steps:
    - name: Publish result to CMS
      run: echo "Publish result to CMS"
    - name: Notify users via email
      run: echo "Notify users via email"
    - name: Notify users via teams channel
      run: echo "Notify users via teams channel"

name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr_validator:
    runs-on: ubuntu-latest
    steps:
      - name: Validate branch name
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: deepakputhraya/action-branch-name@master
        with:
          regex: '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)\/AB\#[0-9]{5}\-[a-zA-Z0-9-/]+$'
          allowed_prefixes: 'feat,fix,docs,style,refactor,perf,tests,build,ci,chore,revert'
          ignore: master,staging,develop, init
          min_length: 5
          max_length: 50
      - uses: TimonVS/pr-labeler-action@v3
        with:
          configuration-path: .github/pr-labeler.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: amannn/action-semantic-pull-request@v5
        if: ${{ github.actor != 'dependabot[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            tests
            build
            ci
            chore
            revert
          requireScope: false
          subjectPattern: ^AB\#[0-9]{5}.*$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
          ignoreLabels: |
            bot
            ignore-semantic-pull-request
          headerPattern: '^(\w*): (.*)$'
          headerPatternCorrespondence: type, subject
          wip: true
          validateSingleCommit: true
          validateSingleCommitMatchesPrTitle: true
  test_suite:
    runs-on: ubuntu-latest
    needs: pr_validator
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Download data from DVC for test execution
      run: echo "Download data from dvc for test execution"
    - name: Run test suite here
      run: make test-ci
    - uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage.xml
        retention-days: 5
    - name: Pytest coverage comment
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-xml-coverage-path: ./coverage.xml
  linting_checks:
    runs-on: ubuntu-latest
    needs: pr_validator
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Run pylint checks here
      run: |
        poetry run pylint $(git ls-files '*.py') -r n --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" --exit-zero > pylint.log
        [ -s pylint.log ] || echo 'No Pylint error found..' > pylint.log
    - uses: actions/upload-artifact@v1
      with:
        name: pylintlog
        path: pylint.log
    - name: Comment pylint logs in PR
      uses: machine-learning-apps/pr-comment@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        path: pylint.log
    - name: Run flake8 checks here
      run: |
        poetry run flake8 --exit-zero --output-file=flake8.txt sample_components tests
        [ -s flake8.txt ] || echo 'No Flake8 error found..' > flake8.txt
    - uses: actions/upload-artifact@v1
      with:
        name: flake8_reports
        path: flake8.txt
    - name: comment Flake8 logs in PR
      uses: machine-learning-apps/pr-comment@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        path: flake8.txt
    - name: Run static typing with mypy
      run: poetry run mypy --config-file pyproject.toml ./
    - uses: marian-code/python-lint-annotate@v3
      with:
        python-root-list: "sample_components/ tests/*"
        use-black: true
        use-isort: true
        use-mypy: true
        use-pycodestyle: false
        use-pydocstyle: true
        use-pylint: true
        use-flake8: true
        use-vulture: true
        python-version: "3.8"
    - run: |
        python --version
    - name: Run bandit checks here
      run: |
        poetry run bandit --exit-zero --format json --output bandit-report.json -r sample_components tests
        [ -s bandit-report.json ] || echo '{"error":"No bandit error found.""}' > bandit-report.json
    - uses: actions/upload-artifact@v1
      with:
        name: bandit_report
        path: bandit-report.json
    - name: comment bandit report in PR
      uses: machine-learning-apps/pr-comment@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        path: bandit-report.json
  formatting_checks:
    runs-on: ubuntu-latest
    needs: pr_validator
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python-3.8@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk.sarif --file=poetry.lock --package-manager=poetry
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.sarif
    - name: Run formatting checks here
      run: echo "Run formatting checks here."
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Autoformat check and fix
      run: |
        poetry run isort --settings-path pyproject.toml ./
        poetry run isort --diff --check-only --settings-path pyproject.toml ./
        poetry run black --config pyproject.toml ./
        poetry run black --diff --check --config pyproject.toml ./
        poetry run darglint --verbosity 2 sample_components tests
        poetry run pyupgrade --exit-zero-even-if-changed --py38-plus **/*.py
    - uses: psf/black@stable
      with:
        options: "--check --verbose"
        src: "./sample_components"
        jupyter: true
        version: "22.10"
  security_checks:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    needs: pr_validator
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Check safety & bandit
      run: |
        poetry check
        poetry run safety check --full-report
        poetry run bandit -ll --recursive sample_components tests
    - uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}
    - name: Run checkmarx here
      run: echo "Run checkmarx here"
    - name: Build a Docker image
      run: docker build -t your/image-to-test .
    - name: Run Snyk to check Docker image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: your/image-to-test
        args: --file=Dockerfile
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.sarif
  notify:
    runs-on: ubuntu-latest
    needs: [test_suite, linting_checks, formatting_checks, security_checks]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
    - uses: actions/download-artifact@v3
    - name: Display structure of downloaded files
      run: ls -R
    - name: Download pylint log here and put in path
      run: echo "Download pylint log here and put in path"
    - name: Download flake8 log here and put in path
      run: echo "Download flake8 log here and put in path"
    - name: Download bandit log here and put in path
      run: echo "Download bandit log here and put in path"
    - name: Publish Sonar Cloud Result
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
    - name: Generate release note
      uses: release-drafter/release-drafter@v5.21.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Use DVC and CML to compare result between working and main branch, attach as pr comment and mail
      run: echo "Use DVC and CML to compare result between working and main branch, attach as pr comment and mail"
    - name: Notify users via email
      run: echo "Notify users via email"
    - name: Notify users via teams channel
      run: echo "Notify users via teams channel"
